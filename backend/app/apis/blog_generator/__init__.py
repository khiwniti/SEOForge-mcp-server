from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
import databutton as db
import google.generativeai as genai
import os

router = APIRouter(prefix="/blog-generator", tags=["Blog Generator"])

# --- Pydantic Models ---
class BlogTopicRequest(BaseModel):
    topic: str = Field(..., description="The main topic or title for the blog post.")
    keywords: Optional[List[str]] = Field(None, description="A list of keywords to focus on for SEO.", example=["AI content", "SEO optimization", "blogging tools"])

class BlogContentResponse(BaseModel):
    generated_text: str = Field(..., description="The AI-generated blog post content.")
    # We will add more fields here later, like meta_description, seo_title, etc.

# --- Helper Functions ---
def get_gemini_client():
    # Try to get API key from environment or use the provided key
    api_key = os.environ.get("GEMINI_API_KEY") or "AIzaSyCwP2ZPEMKJwrCiNi-EsWebc-Ofw2Y44xc"
    
    if not api_key:
        try:
            api_key = db.secrets.get("GEMINI_API_KEY")
        except:
            pass
    
    if not api_key:
        # Return None to use mock content instead
        return None
    
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        return model
    except Exception as e:
        print(f"Error configuring Gemini: {e}")
        return None

# --- API Endpoints ---
@router.post("/generate", response_model=BlogContentResponse)
async def generate_blog_content(request: BlogTopicRequest):
    """
    Generates blog content based on a given topic and optional keywords using OpenAI.
    This is the first version and will be enhanced with more SEO features.
    """
    print(f"Received request to generate blog content for topic: {request.topic}")
    
    model = get_gemini_client()
    
    # If no Gemini client available, return mock content for testing
    if model is None:
        print("No Gemini API key found, returning mock content for testing")
        keywords_text = ""
        if request.keywords:
            keywords_text = f" focusing on {', '.join(request.keywords)}"
        
        mock_content = f"""# {request.topic}

## Introduction

Welcome to this comprehensive guide on {request.topic.lower()}{keywords_text}. In today's digital landscape, understanding this topic is crucial for success.

## Key Benefits

Here are the main advantages of implementing {request.topic.lower()}:

- **Improved Performance**: Enhanced efficiency and better results
- **Cost Effectiveness**: Reduced expenses and better ROI
- **User Experience**: Better engagement and satisfaction
- **Competitive Advantage**: Stay ahead of the competition

## Best Practices

### 1. Planning and Strategy
Start with a solid foundation by planning your approach carefully.

### 2. Implementation
Follow proven methodologies for the best results.

### 3. Monitoring and Optimization
Continuously track performance and make improvements.

## Conclusion

{request.topic} is an essential aspect of modern business strategy. By following the guidelines outlined in this post, you'll be well-equipped to achieve your goals.

*This content was generated by SEOForge MCP Server - your professional SEO optimization tool.*"""
        
        return BlogContentResponse(generated_text=mock_content)

    # Gemini client is available, use real AI generation
    prompt_keywords = ""
    if request.keywords:
        prompt_keywords = f"Please focus on the following keywords: {', '.join(request.keywords)}."
    
    full_prompt = f"""You are an expert SEO content writer and professional blog post generator. Your goal is to create engaging, well-structured, and SEO-friendly blog posts. The content should be cool, stunning, and powerful, reflecting a professional tone suitable for SEO experts and businesses. Ensure the content is informative and provides real value to the reader.

Please write a comprehensive blog post about the topic: '{request.topic}'.
{prompt_keywords}

The blog post should be at least 500 words and include an introduction, several main body paragraphs with headings (use markdown for headings), and a conclusion.
Structure the content logically. Make it highly readable and engaging."""

    try:
        print(f"Sending request to Gemini for topic: {request.topic}")
        response = model.generate_content(full_prompt)
        
        generated_content = response.text
        
        if not generated_content:
            print("Gemini returned empty content.")
            raise HTTPException(status_code=500, detail="AI failed to generate content. The response was empty.")
            
        print(f"Successfully generated content for topic: {request.topic} (Length: {len(generated_content)})")
        return BlogContentResponse(generated_text=generated_content)

    except Exception as e:
        print(f"Error during Gemini API call: {str(e)}")
        raise HTTPException(status_code=500, detail=f"An error occurred while generating blog content with AI: {str(e)}")

